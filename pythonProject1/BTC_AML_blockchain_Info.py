from collections import Counter
from datetime import datetime, timezone
from typing import Dict, Any, List

import requests


def get_bitcoin_transactions(address: str) -> Dict[str, Any]:
    url = f'https://blockchain.info/rawaddr/{address}'
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        return data
    else:
        raise Exception(f"Error fetching Bitcoin transactions: {response.status_code} - {response.text}")


def is_bitcoin_address(address):
    try:
        addr = Address.import_address(address)
        return True if addr else False
    except Exception:
        return False


def analyze_bitcoin_transactions(address: str, transactions: List[Dict[str, Any]]) -> Dict[str, Any]:
    risk_score = 0.0
    total_transaction_value = 0
    unique_addresses = set()
    frequent_transactions = Counter()
    threshold_transactions = 0
    cyclic_patterns = Counter()
    transaction_intervals = []
    total_transactions_today = 0

    current_date = datetime.now(timezone.utc).date()

    for i, tx in enumerate(transactions):
        # –°—É–º–º–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –≤—ã—Ö–æ–¥–æ–≤
        total_transaction_value += sum(out['value'] for out in tx['out'])

        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –≤—Ö–æ–¥–æ–≤ –∏ –≤—ã—Ö–æ–¥–æ–≤
        unique_addresses.update([inp['prev_out']['addr'] for inp in tx['inputs'] if 'prev_out' in inp])
        unique_addresses.update([out['addr'] for out in tx['out'] if 'addr' in out])

        # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        for out in tx['out']:
            if 'addr' in out:
                frequent_transactions[out['addr']] += 1

        # –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_date = datetime.fromtimestamp(tx['time'], tz=timezone.utc).date()
        if transaction_date == current_date:
            total_transactions_today += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if sum(out['value'] for out in tx['out']) > 1000000000:
            risk_score += 1.0
            threshold_transactions += 1

        # –ê–Ω–∞–ª–∏–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        if i > 0:
            prev_tx = transactions[i - 1]
            for inp in tx['inputs']:
                if 'prev_out' in inp and inp['prev_out']['addr'] == prev_tx['hash']:
                    cyclic_patterns[(prev_tx['hash'], tx['hash'])] += 1

                prev_tx_time = datetime.fromtimestamp(prev_tx['time'])
                current_tx_time = datetime.fromtimestamp(tx['time'])
                interval = (current_tx_time - prev_tx_time).total_seconds()
                transaction_intervals.append(interval)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if total_transaction_value > 50000000000:
        risk_score += 1.0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    if len(unique_addresses) > 10:
        risk_score += 1.0

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
    if len(frequent_transactions) > 20:
        risk_score += 1.0

    if threshold_transactions > 5:
        risk_score += 1.0

    if len(cyclic_patterns) > 3:
        risk_score += 1.0

        # –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    short_intervals_count = sum(1 for interval in transaction_intervals if interval < 60)
    if short_intervals_count > 10:
        risk_score += 1.0

    risk_score = risk_score / len(transactions) if transactions else 0

    average_transaction_value = total_transaction_value / len(transactions) if transactions else 0
    top_transactions = sorted(transactions, key=lambda x: sum(out['value'] for out in x['out']), reverse=True)[:3]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    additional_info = {
        "üîÑ Transactions Count": len(transactions),
        "üîó Unique Addresses": len(unique_addresses),
        "üí∞ Total Transaction Volume": total_transaction_value,
        "üìÖ Transactions Today": total_transactions_today,
        "üîù Frequent Transactions": [f"{addr}: {count}" for addr, count in frequent_transactions.most_common(5)],
        "üíπ Average Transaction Size": average_transaction_value,
        "üí• Top Transactions": [{"hash": tx['hash'], "value": sum(out['value'] for out in tx['out'])} for tx in
                               top_transactions]
    }

    risk_assessment = "LOW"
    if risk_score > 0.7:
        risk_assessment = "HIGH"
    elif risk_score > 0.4:
        risk_assessment = "MID"

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤–º–µ—Å—Ç–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ —ç–º–æ–¥–∂–∏
    return {
        "cryptocurrency_type": "BTC",  # –¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        "address": address,
        "risk_score": round(risk_score, 2),
        "risk_assessment": risk_assessment,
        "additional_info": additional_info
    }

#
# btc_address = "1PWgoq2CUafN5V6iLnyg6TXgiqTBJKdufp"
# btc_transactions_data = get_bitcoin_transactions(btc_address)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
# btc_analysis_result = analyze_bitcoin_transactions(btc_address, btc_transactions_data['txs'])
# print(json.dumps(btc_analysis_result, indent=4, ensure_ascii=False))
